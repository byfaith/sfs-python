"""Compute the sound field generated by a sound source.

The Green's function describes the spatial sound propagation over time.

.. include:: math-definitions.rst

"""

import numpy as np
from scipy.interpolate import interp1d
from .. import util
from .. import defs


def point(xs, signal, observation_time, grid, c=None, interpolator_kind='linear', zeropad=True):
    r"""Source model for a point source: 3D Green's function.

    Calculates the scalar sound pressure field for a given point in
    time, evoked by source excitation signal.

    Parameters
    ----------
    xs : (3,) array_like
        Position of source in cartesian coordinates.
    signal : (N,) array_like + float
        Excitation signal consisting of (mono) audio data and a sampling
        rate (in Hertz).  A `DelayedSignal` object can also be used.
    observation_time : float
        Observed point in time.
    grid : triple of array_like
        The grid that is used for the sound field calculations.
        See `sfs.util.xyz_grid()`.
    c : float, optional
        Speed of sound.
    zeropad : bool, optional
        zeropad time signals with 2 samples for spline interpolation.

    Returns
    -------
    numpy.ndarray
        Scalar sound pressure field, evaluated at positions given by
        *grid*.

    Notes
    -----
    .. math::

        g(x-x_s,t) = \frac{1}{4 \pi |x - x_s|} \dirac{t - \frac{|x -
        x_s|}{c}}

    """
    xs = util.asarray_1d(xs)
    data, samplerate, signal_offset = util.as_delayed_signal(signal)
    data = util.asarray_1d(data)
    observation_time = util.asarray_1d(observation_time)
    grid = util.as_xyz_components(grid)
    if c is None:
        c = defs.c
    r = np.linalg.norm(grid - xs)
    # evaluate g over grid
    weights = 1 / (4 * np.pi * r)
    delays = r / c
    base_time = observation_time - signal_offset
    if zeropad:
        time_instants = np.arange(-2, len(data) + 2)
        data = np.concatenate([[0, 0], data, [0, 0]])
    else:
        time_instants = np.arange(len(data))
    if interpolator_kind is 'sinc':
        p = _sinc_interp(data, time_instants,
                         np.array((base_time - delays) * samplerate), samplerate)
    else:
        interpolator = interp1d(time_instants, data,
                                kind=interpolator_kind, bounds_error=False,
                                fill_value=0)
        p = interpolator((base_time - delays) * samplerate)
    return p * weights


def _sinc_interp(x, s, u):
    """
    Ideal sinc interpolation of a signal
    adapted from https://gist.github.com/endolith/1297227

    Parameters
    ----------
    x : (N,) array_like
        Signal to be interpolated.
    s : (N,) array_like
        Sampling instants of signal.
    u : (N,) array_like
        Sampling instants after interpolation.

    Returns
    -------
    numpy.ndarray
        Interpolated signal
    """

    # sampling period
    T = s[1] - s[0]
    # perform sinc interpolation
    shape = u.shape
    u = u.flatten()
    sincM = np.tile(u, (len(s), 1)) - np.tile(s[:, np.newaxis], (1, len(u)))
    y = np.dot(x, np.sinc(sincM/T))
    y = np.reshape(y, shape)
    return y


def point_image_sources(x0, signal, observation_time, grid, L, max_order,
                        coeffs=None, c=None):
    """Point source in a rectangular room using the mirror image source model.

    Parameters
    ----------
    x0 : (3,) array_like
        Position of source in cartesian coordinates.
    signal : (N,) array_like + float
        Excitation signal consisting of (mono) audio data and a sampling
        rate (in Hertz).  A `DelayedSignal` object can also be used.
    observation_time : float
        Observed point in time.
    grid : triple of array_like
        The grid that is used for the sound field calculations.
        See `sfs.util.xyz_grid()`.
    L : (3,) array_like
        Dimensions of the rectangular room.
    max_order : int
        Maximum number of reflections for each image source.
    coeffs : (6,) array_like, optional
        Reflection coeffecients of the walls.
        If not given, the reflection coefficients are set to one.
    c : float, optional
        Speed of sound.

    Returns
    -------
    numpy.ndarray
        Scalar sound pressure field, evaluated at positions given by
        *grid*.

    """
    if coeffs is None:
        coeffs = np.ones(6)

    positions, order = util.image_sources_for_box(x0, L, max_order)
    source_strengths = np.prod(coeffs**order, axis=1)

    p = 0
    for position, strength in zip(positions, source_strengths):
        if strength != 0:
            p += strength * point(position, signal, observation_time, grid, c)

    return p
